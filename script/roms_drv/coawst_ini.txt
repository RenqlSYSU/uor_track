netcdf coawst_ini {
dimensions:
	xpsi = 769 ;
	xrho = 770 ;
	xu = 769 ;
	xv = 770 ;
	epsi = 513 ;
	erho = 514 ;
	eu = 514 ;
	ev = 513 ;
	sc_r = 30 ;
	sc_w = 31 ;
	time = 1 ;
	Nbed = 1 ;
	Nveg = 1 ;
variables:
	short spherical(time) ;
		spherical:long_name = "grid type logical switch" ;
		spherical:flag_meanings = "spherical Cartesian" ;
		spherical:flag_values = "1, 0" ;
	int Vtransform(time) ;
		Vtransform:long_name = "vertical terrain-following transformation equation" ;
	int Vstretching(time) ;
		Vstretching:long_name = "vertical terrain-following stretching function" ;
	double theta_b(time) ;
		theta_b:long_name = "S-coordinate bottom control parameter" ;
		theta_b:units = "1" ;
	double theta_s(time) ;
		theta_s:long_name = "S-coordinate surface control parameter" ;
		theta_s:units = "1" ;
	double Tcline(time) ;
		Tcline:long_name = "S-coordinate surface/bottom layer width" ;
		Tcline:units = "meter" ;
	double hc(time) ;
		hc:long_name = "S-coordinate parameter, critical depth" ;
		hc:units = "meter" ;
	double Cs_r(sc_r) ;
		Cs_r:long_name = "S-coordinate stretching curves at RHO-points" ;
		Cs_r:units = "1" ;
		Cs_r:valid_min = -1. ;
		Cs_r:valid_max = 0. ;
		Cs_r:field = "Cs_r, scalar" ;
	double Cs_w(sc_w) ;
		Cs_w:long_name = "S-coordinate stretching curves at W-points" ;
		Cs_w:units = "1" ;
		Cs_w:valid_min = -1. ;
		Cs_w:valid_max = 0. ;
		Cs_w:field = "Cs_w, scalar" ;
	double sc_r(sc_r) ;
		sc_r:long_name = "S-coordinate at RHO-points" ;
		sc_r:units = "1" ;
		sc_r:valid_min = -1. ;
		sc_r:valid_max = 0. ;
		sc_r:field = "sc_r, scalar" ;
	double sc_w(sc_w) ;
		sc_w:long_name = "S-coordinate at W-points" ;
		sc_w:units = "1" ;
		sc_w:valid_min = -1. ;
		sc_w:valid_max = 0. ;
		sc_w:field = "sc_w, scalar" ;
	double ocean_time(time) ;
		ocean_time:long_name = "time since initialization" ;
		ocean_time:units = "days" ;
		ocean_time:field = "ocean_time, scalar, series" ;
	float salt(time, sc_r, erho, xrho) ;
		salt:long_name = "salinity" ;
		salt:units = "PSU" ;
		salt:field = "salinity, scalar, series" ;
	float temp(time, sc_r, erho, xrho) ;
		temp:long_name = "temperature" ;
		temp:units = "C" ;
		temp:field = "temperature, scalar, series" ;
	float u(time, sc_r, eu, xu) ;
		u:long_name = "u-momentum component" ;
		u:units = "meter second-1" ;
		u:field = "u-velocity, scalar, series" ;
	float ubar(time, eu, xu) ;
		ubar:long_name = "vertically integrated u-momentum component" ;
		ubar:units = "meter second-1" ;
		ubar:field = "ubar-velocity, scalar, series" ;
	float v(time, sc_r, ev, xv) ;
		v:long_name = "v-momentum component" ;
		v:units = "meter second-1" ;
		v:field = "v-velocity, scalar, series" ;
	float vbar(time, ev, xv) ;
		vbar:long_name = "vertically integrated v-momentum component" ;
		vbar:units = "meter second-1" ;
		vbar:field = "vbar-velocity, scalar, series" ;
	float zeta(time, erho, xrho) ;
		zeta:long_name = "free-surface" ;
		zeta:units = "meter" ;
		zeta:field = "free-surface, scalar, series" ;
	double sand_01(time, sc_r, erho, xrho) ;
		sand_01:long_name = "suspended noncohesive sediment, size class 01" ;
		sand_01:units = "kilogram meter-3" ;
		sand_01:time = "ocean_time" ;
		sand_01:field = "sand_01, scalar, series" ;
	double sandfrac_01(time, Nbed, erho, xrho) ;
		sandfrac_01:long_name = "noncohesive sediment fraction, size class 01" ;
		sandfrac_01:units = "nondimensional" ;
		sandfrac_01:time = "ocean_time" ;
		sandfrac_01:field = "sandfrac_01, scalar, series" ;
	double sandmass_01(time, Nbed, erho, xrho) ;
		sandmass_01:long_name = "noncohesive sediment mass, size class 01" ;
		sandmass_01:units = "kilogram meter-2" ;
		sandmass_01:time = "ocean_time" ;
		sandmass_01:field = "sandmass_01, scalar, series" ;
	double bedload_Usand_01(time, eu, xu) ;
		bedload_Usand_01:long_name = "bed load flux of sand in U-direction, size class 01" ;
		bedload_Usand_01:units = "kilogram meter-1 s-1" ;
		bedload_Usand_01:time = "ocean_time" ;
		bedload_Usand_01:field = "bedload_Usand_01, scalar, series" ;
	double bedload_Vsand_01(time, ev, xv) ;
		bedload_Vsand_01:long_name = "bed load flux of sand in V-direction, size class 01" ;
		bedload_Vsand_01:units = "kilogram meter-1 s-1" ;
		bedload_Vsand_01:time = "ocean_time" ;
		bedload_Vsand_01:field = "bedload_Vsand_01, scalar, series" ;
	double bed_thickness(time, Nbed, erho, xrho) ;
		bed_thickness:long_name = "sediment layer thickness" ;
		bed_thickness:units = "meter" ;
		bed_thickness:time = "ocean_time" ;
		bed_thickness:field = "bed thickness, scalar, series" ;
	double bed_age(time, Nbed, erho, xrho) ;
		bed_age:long_name = "sediment layer age" ;
		bed_age:units = "day" ;
		bed_age:time = "ocean_time" ;
		bed_age:field = "bed age, scalar, series" ;
	double bed_porosity(time, Nbed, erho, xrho) ;
		bed_porosity:long_name = "sediment layer porosity" ;
		bed_porosity:units = "nondimensional" ;
		bed_porosity:time = "ocean_time" ;
		bed_porosity:field = "bed porosity, scalar, series" ;
	double bed_biodiff(time, Nbed, erho, xrho) ;
		bed_biodiff:long_name = "biodiffusivity at bottom of each layer" ;
		bed_biodiff:units = "meter2 second-1" ;
		bed_biodiff:time = "ocean_time" ;
		bed_biodiff:field = "bed biodiffusivity, scalar, series" ;
	double grain_diameter(time, erho, xrho) ;
		grain_diameter:long_name = "sediment median grain diameter size" ;
		grain_diameter:units = "meter" ;
		grain_diameter:time = "ocean_time" ;
		grain_diameter:field = "grain diameter, scalar, series" ;
	double grain_density(time, erho, xrho) ;
		grain_density:long_name = "sediment median grain density" ;
		grain_density:units = "kilogram meter-3" ;
		grain_density:time = "ocean_time" ;
		grain_density:field = "grain density, scalar, series" ;
	double settling_vel(time, erho, xrho) ;
		settling_vel:long_name = "sediment median grain settling velocity" ;
		settling_vel:units = "meter second-1" ;
		settling_vel:time = "ocean_time" ;
		settling_vel:field = "settling vel, scalar, series" ;
	double erosion_stress(time, erho, xrho) ;
		erosion_stress:long_name = "sediment median critical erosion stress" ;
		erosion_stress:units = "meter2 second-2" ;
		erosion_stress:time = "ocean_time" ;
		erosion_stress:field = "erosion stress, scalar, series" ;
	double ripple_length(time, erho, xrho) ;
		ripple_length:long_name = "bottom ripple length" ;
		ripple_length:units = "meter" ;
		ripple_length:time = "ocean_time" ;
		ripple_length:field = "ripple length, scalar, series" ;
	double ripple_height(time, erho, xrho) ;
		ripple_height:long_name = "bottom ripple height" ;
		ripple_height:units = "meter" ;
		ripple_height:time = "ocean_time" ;
		ripple_height:field = "ripple height, scalar, series" ;
	double dmix_offset(time, erho, xrho) ;
		dmix_offset:long_name = "dmix erodibility profile offset" ;
		dmix_offset:units = "meter" ;
		dmix_offset:time = "ocean_time" ;
		dmix_offset:field = "dmix_offset, scalar, series" ;
	double dmix_slope(time, erho, xrho) ;
		dmix_slope:long_name = "dmix erodibility profile slope" ;
		dmix_slope:units = "_" ;
		dmix_slope:time = "ocean_time" ;
		dmix_slope:field = "dmix_slope, scalar, series" ;
	double dmix_time(time, erho, xrho) ;
		dmix_time:long_name = "dmix erodibility profile time scale" ;
		dmix_time:units = "seconds" ;
		dmix_time:time = "ocean_time" ;
		dmix_time:field = "dmix_time, scalar, series" ;
	double plant_height(time, Nveg, erho, xrho) ;
		plant_height:long_name = "plant height" ;
		plant_height:units = "meter" ;
		plant_height:time = "ocean_time" ;
		plant_height:field = "plant_height, scalar, series" ;
	double plant_density(time, Nveg, erho, xrho) ;
		plant_density:long_name = "plant density" ;
		plant_density:units = "plant-meter2" ;
		plant_density:time = "ocean_time" ;
		plant_density:field = "plant_density, scalar, series" ;
	double plant_diameter(time, Nveg, erho, xrho) ;
		plant_diameter:long_name = "plant diameter" ;
		plant_diameter:units = "meter" ;
		plant_diameter:time = "ocean_time" ;
		plant_diameter:field = "plant_diameter, scalar, series" ;
	double plant_thickness(time, Nveg, erho, xrho) ;
		plant_thickness:long_name = "plant thickness" ;
		plant_thickness:units = "meter" ;
		plant_thickness:time = "ocean_time" ;
		plant_thickness:field = "plant_thickness, scalar, series" ;
	double marsh_mask(time, Nveg, erho, xrho) ;
		marsh_mask:long_name = "marsh mask" ;
		marsh_mask:units = "nondimensional" ;
		marsh_mask:time = "ocean_time" ;
		marsh_mask:field = "marsh_mask, scalar, series" ;

// global attributes:
		:history = "Created by updatclim on 23-Oct-2021 20:16:20" ;
		:type = "initial forcing file from http://hycom.coaps.fsu.edu:8080/thredds/dodsC/glb_analysis" ;
}
