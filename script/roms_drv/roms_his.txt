netcdf njord_his_d01.20200604 {
dimensions:
	xi_rho = 770 ;
	xi_u = 769 ;
	xi_v = 770 ;
	xi_psi = 769 ;
	eta_rho = 514 ;
	eta_u = 514 ;
	eta_v = 513 ;
	eta_psi = 513 ;
	N = 30 ;
	s_rho = 30 ;
	s_w = 31 ;
	tracer = 2 ;
	boundary = 4 ;
	ocean_time = UNLIMITED ; // (25 currently)
variables:
	int ntimes ;
		ntimes:long_name = "number of long time-steps" ;
	int ndtfast ;
		ndtfast:long_name = "number of short time-steps" ;
	double dt ;
		dt:long_name = "size of long time-steps" ;
		dt:units = "second" ;
	double dtfast ;
		dtfast:long_name = "size of short time-steps" ;
		dtfast:units = "second" ;
	double dstart ;
		dstart:long_name = "time stamp assigned to model initilization" ;
		dstart:units = "days since 1858-11-17 00:00:00" ;
		dstart:calendar = "proleptic_gregorian" ;
	int nHIS ;
		nHIS:long_name = "number of time-steps between history records" ;
	int ndefHIS ;
		ndefHIS:long_name = "number of time-steps between the creation of history files" ;
	int nRST ;
		nRST:long_name = "number of time-steps between restart records" ;
		nRST:cycle = "only latest two records are maintained" ;
	int ntsAVG ;
		ntsAVG:long_name = "starting time-step for accumulation of time-averaged fields" ;
	int nAVG ;
		nAVG:long_name = "number of time-steps between time-averaged records" ;
	int ndefAVG ;
		ndefAVG:long_name = "number of time-steps between the creation of average files" ;
	double Falpha ;
		Falpha:long_name = "Power-law shape barotropic filter parameter" ;
	double Fbeta ;
		Fbeta:long_name = "Power-law shape barotropic filter parameter" ;
	double Fgamma ;
		Fgamma:long_name = "Power-law shape barotropic filter parameter" ;
	double nl_tnu2(tracer) ;
		nl_tnu2:long_name = "nonlinear model Laplacian mixing coefficient for tracers" ;
		nl_tnu2:units = "meter2 second-1" ;
	double nl_visc2 ;
		nl_visc2:long_name = "nonlinear model Laplacian mixing coefficient for momentum" ;
		nl_visc2:units = "meter2 second-1" ;
	int LuvSponge ;
		LuvSponge:long_name = "horizontal viscosity sponge activation switch" ;
		LuvSponge:flag_values = 0, 1 ;
		LuvSponge:flag_meanings = ".FALSE. .TRUE." ;
	int LtracerSponge(tracer) ;
		LtracerSponge:long_name = "horizontal diffusivity sponge activation switch" ;
		LtracerSponge:flag_values = 0, 1 ;
		LtracerSponge:flag_meanings = ".FALSE. .TRUE." ;
	double Akt_bak(tracer) ;
		Akt_bak:long_name = "background vertical mixing coefficient for tracers" ;
		Akt_bak:units = "meter2 second-1" ;
	double Akv_bak ;
		Akv_bak:long_name = "background vertical mixing coefficient for momentum" ;
		Akv_bak:units = "meter2 second-1" ;
	double Akk_bak ;
		Akk_bak:long_name = "background vertical mixing coefficient for turbulent energy" ;
		Akk_bak:units = "meter2 second-1" ;
	double Akp_bak ;
		Akp_bak:long_name = "background vertical mixing coefficient for length scale" ;
		Akp_bak:units = "meter2 second-1" ;
	double rdrg ;
		rdrg:long_name = "linear drag coefficient" ;
		rdrg:units = "meter second-1" ;
	double rdrg2 ;
		rdrg2:long_name = "quadratic drag coefficient" ;
	double Zob ;
		Zob:long_name = "bottom roughness" ;
		Zob:units = "meter" ;
	double Zos ;
		Zos:long_name = "surface roughness" ;
		Zos:units = "meter" ;
	double gls_p ;
		gls_p:long_name = "stability exponent" ;
	double gls_m ;
		gls_m:long_name = "turbulent kinetic energy exponent" ;
	double gls_n ;
		gls_n:long_name = "turbulent length scale exponent" ;
	double gls_cmu0 ;
		gls_cmu0:long_name = "stability coefficient" ;
	double gls_c1 ;
		gls_c1:long_name = "shear production coefficient" ;
	double gls_c2 ;
		gls_c2:long_name = "dissipation coefficient" ;
	double gls_c3m ;
		gls_c3m:long_name = "buoyancy production coefficient (minus)" ;
	double gls_c3p ;
		gls_c3p:long_name = "buoyancy production coefficient (plus)" ;
	double gls_sigk ;
		gls_sigk:long_name = "constant Schmidt number for TKE" ;
	double gls_sigp ;
		gls_sigp:long_name = "constant Schmidt number for PSI" ;
	double gls_Kmin ;
		gls_Kmin:long_name = "minimum value of specific turbulent kinetic energy" ;
	double gls_Pmin ;
		gls_Pmin:long_name = "minimum Value of dissipation" ;
	double Charnok_alpha ;
		Charnok_alpha:long_name = "Charnok factor for surface roughness" ;
	double Zos_hsig_alpha ;
		Zos_hsig_alpha:long_name = "wave amplitude factor for surface roughness" ;
	double sz_alpha ;
		sz_alpha:long_name = "surface flux from wave dissipation" ;
	double CrgBan_cw ;
		CrgBan_cw:long_name = "surface flux due to Craig and Banner wave breaking" ;
	double wec_alpha ;
		wec_alpha:long_name = "coefficient for roller/breaking wave dissipation" ;
	double Znudg ;
		Znudg:long_name = "free-surface nudging/relaxation inverse time scale" ;
		Znudg:units = "day-1" ;
	double M2nudg ;
		M2nudg:long_name = "2D momentum nudging/relaxation inverse time scale" ;
		M2nudg:units = "day-1" ;
	double M3nudg ;
		M3nudg:long_name = "3D momentum nudging/relaxation inverse time scale" ;
		M3nudg:units = "day-1" ;
	double Tnudg(tracer) ;
		Tnudg:long_name = "Tracers nudging/relaxation inverse time scale" ;
		Tnudg:units = "day-1" ;
	double Tnudg_SSS ;
		Tnudg_SSS:long_name = "SSS nudging/relaxation inverse time scale" ;
		Tnudg_SSS:units = "day-1" ;
	double FSobc_in(boundary) ;
		FSobc_in:long_name = "free-surface inflow, nudging inverse time scale" ;
		FSobc_in:units = "second-1" ;
	double FSobc_out(boundary) ;
		FSobc_out:long_name = "free-surface outflow, nudging inverse time scale" ;
		FSobc_out:units = "second-1" ;
	double M2obc_in(boundary) ;
		M2obc_in:long_name = "2D momentum inflow, nudging inverse time scale" ;
		M2obc_in:units = "second-1" ;
	double M2obc_out(boundary) ;
		M2obc_out:long_name = "2D momentum outflow, nudging inverse time scale" ;
		M2obc_out:units = "second-1" ;
	double Tobc_in(boundary, tracer) ;
		Tobc_in:long_name = "tracers inflow, nudging inverse time scale" ;
		Tobc_in:units = "second-1" ;
	double Tobc_out(boundary, tracer) ;
		Tobc_out:long_name = "tracers outflow, nudging inverse time scale" ;
		Tobc_out:units = "second-1" ;
	double M3obc_in(boundary) ;
		M3obc_in:long_name = "3D momentum inflow, nudging inverse time scale" ;
		M3obc_in:units = "second-1" ;
	double M3obc_out(boundary) ;
		M3obc_out:long_name = "3D momentum outflow, nudging inverse time scale" ;
		M3obc_out:units = "second-1" ;
	double rho0 ;
		rho0:long_name = "mean density used in Boussinesq approximation" ;
		rho0:units = "kilogram meter-3" ;
	double gamma2 ;
		gamma2:long_name = "slipperiness parameter" ;
	int LuvSrc ;
		LuvSrc:long_name = "momentum point sources and sink activation switch" ;
		LuvSrc:flag_values = 0, 1 ;
		LuvSrc:flag_meanings = ".FALSE. .TRUE." ;
	int LwSrc ;
		LwSrc:long_name = "mass point sources and sink activation switch" ;
		LwSrc:flag_values = 0, 1 ;
		LwSrc:flag_meanings = ".FALSE. .TRUE." ;
	int LtracerSrc(tracer) ;
		LtracerSrc:long_name = "tracer point sources and sink activation switch" ;
		LtracerSrc:flag_values = 0, 1 ;
		LtracerSrc:flag_meanings = ".FALSE. .TRUE." ;
	int LsshCLM ;
		LsshCLM:long_name = "sea surface height climatology processing switch" ;
		LsshCLM:flag_values = 0, 1 ;
		LsshCLM:flag_meanings = ".FALSE. .TRUE." ;
	int Lm2CLM ;
		Lm2CLM:long_name = "2D momentum climatology processing switch" ;
		Lm2CLM:flag_values = 0, 1 ;
		Lm2CLM:flag_meanings = ".FALSE. .TRUE." ;
	int Lm3CLM ;
		Lm3CLM:long_name = "3D momentum climatology processing switch" ;
		Lm3CLM:flag_values = 0, 1 ;
		Lm3CLM:flag_meanings = ".FALSE. .TRUE." ;
	int LtracerCLM(tracer) ;
		LtracerCLM:long_name = "tracer climatology processing switch" ;
		LtracerCLM:flag_values = 0, 1 ;
		LtracerCLM:flag_meanings = ".FALSE. .TRUE." ;
	int LnudgeM2CLM ;
		LnudgeM2CLM:long_name = "2D momentum climatology nudging activation switch" ;
		LnudgeM2CLM:flag_values = 0, 1 ;
		LnudgeM2CLM:flag_meanings = ".FALSE. .TRUE." ;
	int LnudgeM3CLM ;
		LnudgeM3CLM:long_name = "3D momentum climatology nudging activation switch" ;
		LnudgeM3CLM:flag_values = 0, 1 ;
		LnudgeM3CLM:flag_meanings = ".FALSE. .TRUE." ;
	int LnudgeTCLM(tracer) ;
		LnudgeTCLM:long_name = "tracer climatology nudging activation switch" ;
		LnudgeTCLM:flag_values = 0, 1 ;
		LnudgeTCLM:flag_meanings = ".FALSE. .TRUE." ;
	int spherical ;
		spherical:long_name = "grid type logical switch" ;
		spherical:flag_values = 0, 1 ;
		spherical:flag_meanings = "Cartesian spherical" ;
	double xl ;
		xl:long_name = "domain length in the XI-direction" ;
		xl:units = "meter" ;
	double el ;
		el:long_name = "domain length in the ETA-direction" ;
		el:units = "meter" ;
	int Vtransform ;
		Vtransform:long_name = "vertical terrain-following transformation equation" ;
	int Vstretching ;
		Vstretching:long_name = "vertical terrain-following stretching function" ;
	double theta_s ;
		theta_s:long_name = "S-coordinate surface control parameter" ;
	double theta_b ;
		theta_b:long_name = "S-coordinate bottom control parameter" ;
	double Tcline ;
		Tcline:long_name = "S-coordinate surface/bottom layer width" ;
		Tcline:units = "meter" ;
	double hc ;
		hc:long_name = "S-coordinate parameter, critical depth" ;
		hc:units = "meter" ;
	int grid ;
		grid:cf_role = "grid_topology" ;
		grid:topology_dimension = 2 ;
		grid:node_dimensions = "xi_psi eta_psi" ;
		grid:face_dimensions = "xi_rho: xi_psi (padding: both) eta_rho: eta_psi (padding: both)" ;
		grid:edge1_dimensions = "xi_u: xi_psi eta_u: eta_psi (padding: both)" ;
		grid:edge2_dimensions = "xi_v: xi_psi (padding: both) eta_v: eta_psi" ;
		grid:node_coordinates = "lon_psi lat_psi" ;
		grid:face_coordinates = "lon_rho lat_rho" ;
		grid:edge1_coordinates = "lon_u lat_u" ;
		grid:edge2_coordinates = "lon_v lat_v" ;
		grid:vertical_dimensions = "s_rho: s_w (padding: none)" ;
	double s_rho(s_rho) ;
		s_rho:long_name = "S-coordinate at RHO-points" ;
		s_rho:valid_min = -1. ;
		s_rho:valid_max = 0. ;
		s_rho:positive = "up" ;
		s_rho:standard_name = "ocean_s_coordinate_g2" ;
		s_rho:formula_terms = "s: s_rho C: Cs_r eta: zeta depth: h depth_c: hc" ;
		s_rho:field = "s_rho, scalar" ;
	double s_w(s_w) ;
		s_w:long_name = "S-coordinate at W-points" ;
		s_w:valid_min = -1. ;
		s_w:valid_max = 0. ;
		s_w:positive = "up" ;
		s_w:standard_name = "ocean_s_coordinate_g2" ;
		s_w:formula_terms = "s: s_w C: Cs_w eta: zeta depth: h depth_c: hc" ;
		s_w:field = "s_w, scalar" ;
	double Cs_r(s_rho) ;
		Cs_r:long_name = "S-coordinate stretching curves at RHO-points" ;
		Cs_r:valid_min = -1. ;
		Cs_r:valid_max = 0. ;
		Cs_r:field = "Cs_r, scalar" ;
	double Cs_w(s_w) ;
		Cs_w:long_name = "S-coordinate stretching curves at W-points" ;
		Cs_w:valid_min = -1. ;
		Cs_w:valid_max = 0. ;
		Cs_w:field = "Cs_w, scalar" ;
	double h(eta_rho, xi_rho) ;
		h:long_name = "bathymetry at RHO-points" ;
		h:units = "meter" ;
		h:grid = "grid" ;
		h:location = "face" ;
		h:coordinates = "lon_rho lat_rho" ;
		h:field = "bath, scalar" ;
	double f(eta_rho, xi_rho) ;
		f:long_name = "Coriolis parameter at RHO-points" ;
		f:units = "second-1" ;
		f:grid = "grid" ;
		f:location = "face" ;
		f:coordinates = "lon_rho lat_rho" ;
		f:field = "coriolis, scalar" ;
	double pm(eta_rho, xi_rho) ;
		pm:long_name = "curvilinear coordinate metric in XI" ;
		pm:units = "meter-1" ;
		pm:grid = "grid" ;
		pm:location = "face" ;
		pm:coordinates = "lon_rho lat_rho" ;
		pm:field = "pm, scalar" ;
	double pn(eta_rho, xi_rho) ;
		pn:long_name = "curvilinear coordinate metric in ETA" ;
		pn:units = "meter-1" ;
		pn:grid = "grid" ;
		pn:location = "face" ;
		pn:coordinates = "lon_rho lat_rho" ;
		pn:field = "pn, scalar" ;
	double lon_rho(eta_rho, xi_rho) ;
		lon_rho:long_name = "longitude of RHO-points" ;
		lon_rho:units = "degree_east" ;
		lon_rho:standard_name = "longitude" ;
		lon_rho:field = "lon_rho, scalar" ;
	double lat_rho(eta_rho, xi_rho) ;
		lat_rho:long_name = "latitude of RHO-points" ;
		lat_rho:units = "degree_north" ;
		lat_rho:standard_name = "latitude" ;
		lat_rho:field = "lat_rho, scalar" ;
	double lon_u(eta_u, xi_u) ;
		lon_u:long_name = "longitude of U-points" ;
		lon_u:units = "degree_east" ;
		lon_u:standard_name = "longitude" ;
		lon_u:field = "lon_u, scalar" ;
	double lat_u(eta_u, xi_u) ;
		lat_u:long_name = "latitude of U-points" ;
		lat_u:units = "degree_north" ;
		lat_u:standard_name = "latitude" ;
		lat_u:field = "lat_u, scalar" ;
	double lon_v(eta_v, xi_v) ;
		lon_v:long_name = "longitude of V-points" ;
		lon_v:units = "degree_east" ;
		lon_v:standard_name = "longitude" ;
		lon_v:field = "lon_v, scalar" ;
	double lat_v(eta_v, xi_v) ;
		lat_v:long_name = "latitude of V-points" ;
		lat_v:units = "degree_north" ;
		lat_v:standard_name = "latitude" ;
		lat_v:field = "lat_v, scalar" ;
	double lon_psi(eta_psi, xi_psi) ;
		lon_psi:long_name = "longitude of PSI-points" ;
		lon_psi:units = "degree_east" ;
		lon_psi:standard_name = "longitude" ;
		lon_psi:field = "lon_psi, scalar" ;
	double lat_psi(eta_psi, xi_psi) ;
		lat_psi:long_name = "latitude of PSI-points" ;
		lat_psi:units = "degree_north" ;
		lat_psi:standard_name = "latitude" ;
		lat_psi:field = "lat_psi, scalar" ;
	double angle(eta_rho, xi_rho) ;
		angle:long_name = "angle between XI-axis and EAST" ;
		angle:units = "radians" ;
		angle:grid = "grid" ;
		angle:location = "face" ;
		angle:coordinates = "lon_rho lat_rho" ;
		angle:field = "angle, scalar" ;
	double mask_rho(eta_rho, xi_rho) ;
		mask_rho:long_name = "mask on RHO-points" ;
		mask_rho:flag_values = 0., 1. ;
		mask_rho:flag_meanings = "land water" ;
		mask_rho:grid = "grid" ;
		mask_rho:location = "face" ;
		mask_rho:coordinates = "lon_rho lat_rho" ;
	double mask_u(eta_u, xi_u) ;
		mask_u:long_name = "mask on U-points" ;
		mask_u:flag_values = 0., 1. ;
		mask_u:flag_meanings = "land water" ;
		mask_u:grid = "grid" ;
		mask_u:location = "edge1" ;
		mask_u:coordinates = "lon_u lat_u" ;
	double mask_v(eta_v, xi_v) ;
		mask_v:long_name = "mask on V-points" ;
		mask_v:flag_values = 0., 1. ;
		mask_v:flag_meanings = "land water" ;
		mask_v:grid = "grid" ;
		mask_v:location = "edge2" ;
		mask_v:coordinates = "lon_v lat_v" ;
	double mask_psi(eta_psi, xi_psi) ;
		mask_psi:long_name = "mask on psi-points" ;
		mask_psi:flag_values = 0., 1. ;
		mask_psi:flag_meanings = "land water" ;
		mask_psi:grid = "grid" ;
		mask_psi:location = "node" ;
		mask_psi:coordinates = "lon_psi lat_psi" ;
	double ocean_time(ocean_time) ;
		ocean_time:long_name = "time since initialization" ;
		ocean_time:units = "seconds since 1858-11-17 00:00:00" ;
		ocean_time:calendar = "proleptic_gregorian" ;
		ocean_time:field = "time, scalar, series" ;
	float zeta(ocean_time, eta_rho, xi_rho) ;
		zeta:long_name = "free-surface" ;
		zeta:units = "meter" ;
		zeta:time = "ocean_time" ;
		zeta:grid = "grid" ;
		zeta:location = "face" ;
		zeta:coordinates = "lon_rho lat_rho ocean_time" ;
		zeta:field = "free-surface, scalar, series" ;
		zeta:_FillValue = 1.e+37f ;
	float ubar(ocean_time, eta_u, xi_u) ;
		ubar:long_name = "vertically integrated u-momentum component" ;
		ubar:units = "meter second-1" ;
		ubar:time = "ocean_time" ;
		ubar:grid = "grid" ;
		ubar:location = "edge1" ;
		ubar:coordinates = "lon_u lat_u ocean_time" ;
		ubar:field = "ubar-velocity, scalar, series" ;
		ubar:_FillValue = 1.e+37f ;
	float vbar(ocean_time, eta_v, xi_v) ;
		vbar:long_name = "vertically integrated v-momentum component" ;
		vbar:units = "meter second-1" ;
		vbar:time = "ocean_time" ;
		vbar:grid = "grid" ;
		vbar:location = "edge2" ;
		vbar:coordinates = "lon_v lat_v ocean_time" ;
		vbar:field = "vbar-velocity, scalar, series" ;
		vbar:_FillValue = 1.e+37f ;
	float u(ocean_time, s_rho, eta_u, xi_u) ;
		u:long_name = "u-momentum component" ;
		u:units = "meter second-1" ;
		u:time = "ocean_time" ;
		u:grid = "grid" ;
		u:location = "edge1" ;
		u:coordinates = "lon_u lat_u s_rho ocean_time" ;
		u:field = "u-velocity, scalar, series" ;
		u:_FillValue = 1.e+37f ;
	float v(ocean_time, s_rho, eta_v, xi_v) ;
		v:long_name = "v-momentum component" ;
		v:units = "meter second-1" ;
		v:time = "ocean_time" ;
		v:grid = "grid" ;
		v:location = "edge2" ;
		v:coordinates = "lon_v lat_v s_rho ocean_time" ;
		v:field = "v-velocity, scalar, series" ;
		v:_FillValue = 1.e+37f ;
	float w(ocean_time, s_w, eta_rho, xi_rho) ;
		w:long_name = "vertical momentum component" ;
		w:units = "meter second-1" ;
		w:time = "ocean_time" ;
		w:standard_name = "upward_sea_water_velocity" ;
		w:grid = "grid" ;
		w:location = "face" ;
		w:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		w:field = "w-velocity, scalar, series" ;
		w:_FillValue = 1.e+37f ;
	float omega(ocean_time, s_w, eta_rho, xi_rho) ;
		omega:long_name = "S-coordinate vertical momentum component" ;
		omega:units = "meter second-1" ;
		omega:time = "ocean_time" ;
		omega:grid = "grid" ;
		omega:location = "face" ;
		omega:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		omega:field = "omega, scalar, series" ;
		omega:_FillValue = 1.e+37f ;
	float temp(ocean_time, s_rho, eta_rho, xi_rho) ;
		temp:long_name = "potential temperature" ;
		temp:units = "Celsius" ;
		temp:time = "ocean_time" ;
		temp:grid = "grid" ;
		temp:location = "face" ;
		temp:coordinates = "lon_rho lat_rho s_rho ocean_time" ;
		temp:field = "temperature, scalar, series" ;
		temp:_FillValue = 1.e+37f ;
	float salt(ocean_time, s_rho, eta_rho, xi_rho) ;
		salt:long_name = "salinity" ;
		salt:time = "ocean_time" ;
		salt:grid = "grid" ;
		salt:location = "face" ;
		salt:coordinates = "lon_rho lat_rho s_rho ocean_time" ;
		salt:field = "salinity, scalar, series" ;
		salt:_FillValue = 1.e+37f ;
	float AKv(ocean_time, s_w, eta_rho, xi_rho) ;
		AKv:long_name = "vertical viscosity coefficient" ;
		AKv:units = "meter2 second-1" ;
		AKv:time = "ocean_time" ;
		AKv:grid = "grid" ;
		AKv:location = "face" ;
		AKv:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		AKv:field = "AKv, scalar, series" ;
	float tke(ocean_time, s_w, eta_rho, xi_rho) ;
		tke:long_name = "turbulent kinetic energy" ;
		tke:units = "meter2 second-2" ;
		tke:time = "ocean_time" ;
		tke:grid = "grid" ;
		tke:location = "face" ;
		tke:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		tke:field = "tke, scalar, series" ;
	float gls(ocean_time, s_w, eta_rho, xi_rho) ;
		gls:long_name = "turbulent generic length scale" ;
		gls:units = "meter3 second-2" ;
		gls:time = "ocean_time" ;
		gls:grid = "grid" ;
		gls:location = "face" ;
		gls:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		gls:field = "gls, scalar, series" ;
	float Pair(ocean_time, eta_rho, xi_rho) ;
		Pair:long_name = "surface air pressure" ;
		Pair:units = "millibar" ;
		Pair:time = "ocean_time" ;
		Pair:grid = "grid" ;
		Pair:location = "face" ;
		Pair:coordinates = "lon_rho lat_rho ocean_time" ;
		Pair:field = "Pair, scalar, series" ;
		Pair:_FillValue = 1.e+37f ;
	float Uwind(ocean_time, eta_rho, xi_rho) ;
		Uwind:long_name = "surface u-wind component" ;
		Uwind:units = "meter second-1" ;
		Uwind:time = "ocean_time" ;
		Uwind:grid = "grid" ;
		Uwind:location = "face" ;
		Uwind:coordinates = "lon_rho lat_rho ocean_time" ;
		Uwind:field = "u-wind, scalar, series" ;
		Uwind:_FillValue = 1.e+37f ;
	float Vwind(ocean_time, eta_rho, xi_rho) ;
		Vwind:long_name = "surface v-wind component" ;
		Vwind:units = "meter second-1" ;
		Vwind:time = "ocean_time" ;
		Vwind:grid = "grid" ;
		Vwind:location = "face" ;
		Vwind:coordinates = "lon_rho lat_rho ocean_time" ;
		Vwind:field = "v-wind, scalar, series" ;
		Vwind:_FillValue = 1.e+37f ;
	float Uwind_eastward(ocean_time, eta_rho, xi_rho) ;
		Uwind_eastward:long_name = "eastward surface wind component at RHO-points" ;
		Uwind_eastward:units = "meter second-1" ;
		Uwind_eastward:time = "ocean_time" ;
		Uwind_eastward:grid = "grid" ;
		Uwind_eastward:location = "face" ;
		Uwind_eastward:coordinates = "lon_rho lat_rho ocean_time" ;
		Uwind_eastward:field = "Uwind_eastward, scalar, series" ;
		Uwind_eastward:_FillValue = 1.e+37f ;
	float Vwind_northward(ocean_time, eta_rho, xi_rho) ;
		Vwind_northward:long_name = "northward surface wind component at RHO-points" ;
		Vwind_northward:units = "meter second-1" ;
		Vwind_northward:time = "ocean_time" ;
		Vwind_northward:grid = "grid" ;
		Vwind_northward:location = "face" ;
		Vwind_northward:coordinates = "lon_rho lat_rho ocean_time" ;
		Vwind_northward:field = "Vwind_northward, scalar, series" ;
		Vwind_northward:_FillValue = 1.e+37f ;
	float shflux(ocean_time, eta_rho, xi_rho) ;
		shflux:long_name = "surface net heat flux" ;
		shflux:units = "watt meter-2" ;
		shflux:negative_value = "upward flux, cooling" ;
		shflux:positive_value = "downward flux, heating" ;
		shflux:time = "ocean_time" ;
		shflux:grid = "grid" ;
		shflux:location = "face" ;
		shflux:coordinates = "lon_rho lat_rho ocean_time" ;
		shflux:field = "surface heat flux, scalar, series" ;
		shflux:_FillValue = 1.e+37f ;
	float ssflux(ocean_time, eta_rho, xi_rho) ;
		ssflux:long_name = "surface net salt flux, (E-P)*SALT" ;
		ssflux:units = "meter second-1" ;
		ssflux:negative_value = "upward flux, freshening (net precipitation)" ;
		ssflux:positive_value = "downward flux, salting (net evaporation)" ;
		ssflux:time = "ocean_time" ;
		ssflux:grid = "grid" ;
		ssflux:location = "face" ;
		ssflux:coordinates = "lon_rho lat_rho ocean_time" ;
		ssflux:field = "surface net salt flux, scalar, series" ;
		ssflux:_FillValue = 1.e+37f ;
	float latent(ocean_time, eta_rho, xi_rho) ;
		latent:long_name = "net latent heat flux" ;
		latent:units = "watt meter-2" ;
		latent:negative_value = "upward flux, cooling" ;
		latent:positive_value = "downward flux, heating" ;
		latent:time = "ocean_time" ;
		latent:grid = "grid" ;
		latent:location = "face" ;
		latent:coordinates = "lon_rho lat_rho ocean_time" ;
		latent:field = "latent heat flux, scalar, series" ;
		latent:_FillValue = 1.e+37f ;
	float sensible(ocean_time, eta_rho, xi_rho) ;
		sensible:long_name = "net sensible heat flux" ;
		sensible:units = "watt meter-2" ;
		sensible:negative_value = "upward flux, cooling" ;
		sensible:positive_value = "downward flux, heating" ;
		sensible:time = "ocean_time" ;
		sensible:grid = "grid" ;
		sensible:location = "face" ;
		sensible:coordinates = "lon_rho lat_rho ocean_time" ;
		sensible:field = "sensible heat flux, scalar, series" ;
		sensible:_FillValue = 1.e+37f ;
	float lwrad(ocean_time, eta_rho, xi_rho) ;
		lwrad:long_name = "net longwave radiation flux" ;
		lwrad:units = "watt meter-2" ;
		lwrad:negative_value = "upward flux, cooling" ;
		lwrad:positive_value = "downward flux, heating" ;
		lwrad:time = "ocean_time" ;
		lwrad:grid = "grid" ;
		lwrad:location = "face" ;
		lwrad:coordinates = "lon_rho lat_rho ocean_time" ;
		lwrad:field = "longwave radiation, scalar, series" ;
		lwrad:_FillValue = 1.e+37f ;
	float EminusP(ocean_time, eta_rho, xi_rho) ;
		EminusP:long_name = "bulk_flux surface net freswater flux, (E-P)" ;
		EminusP:units = "meter second-1" ;
		EminusP:negative_value = "upward flux, freshening (net precipitation)" ;
		EminusP:positive_value = "downward flux, salting (net evaporation)" ;
		EminusP:time = "ocean_time" ;
		EminusP:grid = "grid" ;
		EminusP:location = "face" ;
		EminusP:coordinates = "lon_rho lat_rho ocean_time" ;
		EminusP:field = "EminusP, scalar, series" ;
		EminusP:_FillValue = 1.e+37f ;
	float evaporation(ocean_time, eta_rho, xi_rho) ;
		evaporation:long_name = "evaporation rate" ;
		evaporation:units = "kilogram meter-2 second-1" ;
		evaporation:negative_value = "downward flux, freshening (condensation)" ;
		evaporation:positive_value = "upward flux, salting (evaporation)" ;
		evaporation:time = "ocean_time" ;
		evaporation:grid = "grid" ;
		evaporation:location = "face" ;
		evaporation:coordinates = "lon_rho lat_rho ocean_time" ;
		evaporation:field = "evaporation, scalar, series" ;
		evaporation:_FillValue = 1.e+37f ;
	float rain(ocean_time, eta_rho, xi_rho) ;
		rain:long_name = "rain fall rate" ;
		rain:units = "kilogram meter-2 second-1" ;
		rain:negative_value = "upward flux, salting (NOT POSSIBLE)" ;
		rain:positive_value = "downward flux, freshening (precipitation)" ;
		rain:time = "ocean_time" ;
		rain:grid = "grid" ;
		rain:location = "face" ;
		rain:coordinates = "lon_rho lat_rho ocean_time" ;
		rain:field = "rain, scalar, series" ;
		rain:_FillValue = 1.e+37f ;
	float swrad(ocean_time, eta_rho, xi_rho) ;
		swrad:long_name = "solar shortwave radiation flux" ;
		swrad:units = "watt meter-2" ;
		swrad:negative_value = "upward flux, cooling" ;
		swrad:positive_value = "downward flux, heating" ;
		swrad:time = "ocean_time" ;
		swrad:grid = "grid" ;
		swrad:location = "face" ;
		swrad:coordinates = "lon_rho lat_rho ocean_time" ;
		swrad:field = "shortwave radiation, scalar, series" ;
		swrad:_FillValue = 1.e+37f ;
	float sustr(ocean_time, eta_u, xi_u) ;
		sustr:long_name = "surface u-momentum stress" ;
		sustr:units = "newton meter-2" ;
		sustr:time = "ocean_time" ;
		sustr:grid = "grid" ;
		sustr:location = "edge1" ;
		sustr:coordinates = "lon_u lat_u ocean_time" ;
		sustr:field = "surface u-momentum stress, scalar, series" ;
		sustr:_FillValue = 1.e+37f ;
	float svstr(ocean_time, eta_v, xi_v) ;
		svstr:long_name = "surface v-momentum stress" ;
		svstr:units = "newton meter-2" ;
		svstr:time = "ocean_time" ;
		svstr:grid = "grid" ;
		svstr:location = "edge2" ;
		svstr:coordinates = "lon_v lat_v ocean_time" ;
		svstr:field = "surface v-momentum stress, scalar, series" ;
		svstr:_FillValue = 1.e+37f ;
	float bustr(ocean_time, eta_u, xi_u) ;
		bustr:long_name = "bottom u-momentum stress" ;
		bustr:units = "newton meter-2" ;
		bustr:time = "ocean_time" ;
		bustr:grid = "grid" ;
		bustr:location = "edge1" ;
		bustr:coordinates = "lon_u lat_u ocean_time" ;
		bustr:field = "bottom u-momentum stress, scalar, series" ;
		bustr:_FillValue = 1.e+37f ;
	float bvstr(ocean_time, eta_v, xi_v) ;
		bvstr:long_name = "bottom v-momentum stress" ;
		bvstr:units = "newton meter-2" ;
		bvstr:time = "ocean_time" ;
		bvstr:grid = "grid" ;
		bvstr:location = "edge2" ;
		bvstr:coordinates = "lon_v lat_v ocean_time" ;
		bvstr:field = "bottom v-momentum stress, scalar, series" ;
		bvstr:_FillValue = 1.e+37f ;
	float uWave(ocean_time, eta_rho, xi_rho) ;
		uWave:long_name = "coupling vertically integrated u-momentum component" ;
		uWave:units = "meter second-1" ;
		uWave:time = "ocean_time" ;
		uWave:grid = "grid" ;
		uWave:location = "face" ;
		uWave:coordinates = "lon_rho lat_rho ocean_time" ;
		uWave:field = "uWave-velocity, scalar, series" ;
		uWave:_FillValue = 1.e+37f ;
	float vWave(ocean_time, eta_rho, xi_rho) ;
		vWave:long_name = "coupling vertically integrated v-momentum component" ;
		vWave:units = "meter second-1" ;
		vWave:time = "ocean_time" ;
		vWave:grid = "grid" ;
		vWave:location = "face" ;
		vWave:coordinates = "lon_rho lat_rho ocean_time" ;
		vWave:field = "vWave-velocity, scalar, series" ;
		vWave:_FillValue = 1.e+37f ;
	float ubar_stokes(ocean_time, eta_u, xi_u) ;
		ubar_stokes:long_name = "vertically-integrated u-Stokes drift velocity" ;
		ubar_stokes:units = "meter second-1" ;
		ubar_stokes:time = "ocean_time" ;
		ubar_stokes:grid = "grid" ;
		ubar_stokes:location = "edge1" ;
		ubar_stokes:coordinates = "lon_u lat_u ocean_time" ;
		ubar_stokes:field = "ubar_stokes-velocity, scalar, series" ;
		ubar_stokes:_FillValue = 1.e+37f ;
	float vbar_stokes(ocean_time, eta_v, xi_v) ;
		vbar_stokes:long_name = "vertically-integrated v-Stokes drift velocity" ;
		vbar_stokes:units = "meter second-1" ;
		vbar_stokes:time = "ocean_time" ;
		vbar_stokes:grid = "grid" ;
		vbar_stokes:location = "edge2" ;
		vbar_stokes:coordinates = "lon_v lat_v ocean_time" ;
		vbar_stokes:field = "vbar_stokes, scalar, series" ;
		vbar_stokes:_FillValue = 1.e+37f ;
	float u_stokes(ocean_time, s_rho, eta_u, xi_u) ;
		u_stokes:long_name = "u-Stokes drift velocity" ;
		u_stokes:units = "meter second-1" ;
		u_stokes:time = "ocean_time" ;
		u_stokes:grid = "grid" ;
		u_stokes:location = "edge1" ;
		u_stokes:coordinates = "lon_u lat_u s_rho ocean_time" ;
		u_stokes:field = "u_stokes, scalar, series" ;
		u_stokes:_FillValue = 1.e+37f ;
	float v_stokes(ocean_time, s_rho, eta_v, xi_v) ;
		v_stokes:long_name = "v-Stokes drift velocity" ;
		v_stokes:units = "meter second-1" ;
		v_stokes:time = "ocean_time" ;
		v_stokes:grid = "grid" ;
		v_stokes:location = "edge2" ;
		v_stokes:coordinates = "lon_v lat_v s_rho ocean_time" ;
		v_stokes:field = "v_stokes, scalar, series" ;
		v_stokes:_FillValue = 1.e+37f ;
	float omega_stokes(ocean_time, s_w, eta_rho, xi_rho) ;
		omega_stokes:long_name = "S-coordinate vertical drift velocity" ;
		omega_stokes:units = "meter3 second-1" ;
		omega_stokes:time = "ocean_time" ;
		omega_stokes:grid = "grid" ;
		omega_stokes:location = "face" ;
		omega_stokes:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		omega_stokes:field = "omega_stokes, scalar, series" ;
		omega_stokes:_FillValue = 1.e+37f ;
	float w_stokes(ocean_time, s_w, eta_rho, xi_rho) ;
		w_stokes:long_name = "w-Stokes vertical drift velocity" ;
		w_stokes:units = "meter second-1" ;
		w_stokes:time = "ocean_time" ;
		w_stokes:grid = "grid" ;
		w_stokes:location = "face" ;
		w_stokes:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		w_stokes:field = "w_stokes, scalar, series" ;
		w_stokes:_FillValue = 1.e+37f ;
	float Hwave(ocean_time, eta_rho, xi_rho) ;
		Hwave:long_name = "wind-induced significant wave height" ;
		Hwave:units = "meter" ;
		Hwave:time = "ocean_time" ;
		Hwave:grid = "grid" ;
		Hwave:location = "face" ;
		Hwave:coordinates = "lon_rho lat_rho ocean_time" ;
		Hwave:field = "Hwave, scalar, series" ;
		Hwave:_FillValue = 1.e+37f ;
	float Lwave(ocean_time, eta_rho, xi_rho) ;
		Lwave:long_name = "wind-induced mean wavelength" ;
		Lwave:units = "meter" ;
		Lwave:time = "ocean_time" ;
		Lwave:grid = "grid" ;
		Lwave:location = "face" ;
		Lwave:coordinates = "lon_rho lat_rho ocean_time" ;
		Lwave:field = "Lwave, scalar, series" ;
		Lwave:_FillValue = 1.e+37f ;
	float Lwavep(ocean_time, eta_rho, xi_rho) ;
		Lwavep:long_name = "wind-induced peak wavelength" ;
		Lwavep:units = "meter" ;
		Lwavep:time = "ocean_time" ;
		Lwavep:grid = "grid" ;
		Lwavep:location = "face" ;
		Lwavep:coordinates = "lon_rho lat_rho ocean_time" ;
		Lwavep:field = "Lwavep, scalar, series" ;
		Lwavep:_FillValue = 1.e+37f ;
	float Dwave(ocean_time, eta_rho, xi_rho) ;
		Dwave:long_name = "wind-induced wave direction - mean" ;
		Dwave:units = "degrees" ;
		Dwave:time = "ocean_time" ;
		Dwave:grid = "grid" ;
		Dwave:location = "face" ;
		Dwave:coordinates = "lon_rho lat_rho ocean_time" ;
		Dwave:field = "Dwave, scalar, series" ;
		Dwave:_FillValue = 1.e+37f ;
	float Dwavep(ocean_time, eta_rho, xi_rho) ;
		Dwavep:long_name = "wind-induced wave direction -  peak" ;
		Dwavep:units = "degrees" ;
		Dwavep:time = "ocean_time" ;
		Dwavep:grid = "grid" ;
		Dwavep:location = "face" ;
		Dwavep:coordinates = "lon_rho lat_rho ocean_time" ;
		Dwavep:field = "Dwavep, scalar, series" ;
		Dwavep:_FillValue = 1.e+37f ;
	float Pwave_top(ocean_time, eta_rho, xi_rho) ;
		Pwave_top:long_name = "wind-induced peak surface wave Period" ;
		Pwave_top:units = "second" ;
		Pwave_top:time = "ocean_time" ;
		Pwave_top:grid = "grid" ;
		Pwave_top:location = "face" ;
		Pwave_top:coordinates = "lon_rho lat_rho ocean_time" ;
		Pwave_top:field = "Pwave_top, scalar, series" ;
		Pwave_top:_FillValue = 1.e+37f ;
	float Pwave_bot(ocean_time, eta_rho, xi_rho) ;
		Pwave_bot:long_name = "wind-induced bottom wave Period" ;
		Pwave_bot:units = "second" ;
		Pwave_bot:time = "ocean_time" ;
		Pwave_bot:grid = "grid" ;
		Pwave_bot:location = "face" ;
		Pwave_bot:coordinates = "lon_rho lat_rho ocean_time" ;
		Pwave_bot:field = "Pwave_bot, scalar, series" ;
		Pwave_bot:_FillValue = 1.e+37f ;
	float Uwave_rms(ocean_time, eta_rho, xi_rho) ;
		Uwave_rms:long_name = "wind-induced bottom orbital velocity" ;
		Uwave_rms:units = "meter second-1" ;
		Uwave_rms:time = "ocean_time" ;
		Uwave_rms:grid = "grid" ;
		Uwave_rms:location = "face" ;
		Uwave_rms:coordinates = "lon_rho lat_rho ocean_time" ;
		Uwave_rms:field = "Uwave_rms, scalar, series" ;
		Uwave_rms:_FillValue = 1.e+37f ;
	float zetaw(ocean_time, eta_rho, xi_rho) ;
		zetaw:long_name = "WEC quasi-static sea level adjustment" ;
		zetaw:units = "meter" ;
		zetaw:time = "ocean_time" ;
		zetaw:grid = "grid" ;
		zetaw:location = "face" ;
		zetaw:coordinates = "lon_rho lat_rho ocean_time" ;
		zetaw:field = "zetaw, scalar, series" ;
		zetaw:_FillValue = 1.e+37f ;
	float qsp(ocean_time, eta_rho, xi_rho) ;
		qsp:long_name = "WEC quasi-static sea pressure" ;
		qsp:units = "meter" ;
		qsp:time = "ocean_time" ;
		qsp:grid = "grid" ;
		qsp:location = "face" ;
		qsp:coordinates = "lon_rho lat_rho ocean_time" ;
		qsp:field = "qsp, scalar, series" ;
		qsp:_FillValue = 1.e+37f ;
	float bh(ocean_time, eta_rho, xi_rho) ;
		bh:long_name = "WEC Bernoulli head" ;
		bh:units = "meter2 second-2" ;
		bh:time = "ocean_time" ;
		bh:grid = "grid" ;
		bh:location = "face" ;
		bh:coordinates = "lon_rho lat_rho ocean_time" ;
		bh:field = "bh, scalar, series" ;
		bh:_FillValue = 1.e+37f ;

// global attributes:
		:file = "njord_his_d01.nc" ;
		:format = "netCDF-3 64bit offset file" ;
		:Conventions = "CF-1.4, SGRID-0.3" ;
		:type = "ROMS/TOMS history file" ;
		:title = "Njord" ;
		:var_info = "ROMS/External/varinfo.dat" ;
		:rst_file = "njord_rst_d01.nc" ;
		:his_file = "njord_his_d01.nc" ;
		:avg_file = "njord_avg_d01.nc" ;
		:grd_file = "Projects/Njord/roms_swan_grid/roms_d01_lp0d1.nc" ;
		:ini_file = "Projects/Njord/ow_icbc/d01/coawst_ini.nc" ;
		:bry_file_01 = "Projects/Njord/ow_icbc/d01/coawst_bdy_20200604.nc" ;
		:clm_file_01 = "Projects/Njord/ow_icbc/d01/coawst_clm_20200604.nc" ;
		:script_file = "" ;
		:NLM_LBC = "\n",
			"EDGE:         WEST   SOUTH  EAST   NORTH  \n",
			"zeta:         Clo    Cha    Cha    Cha    \n",
			"ubar:         Clo    Fla    Fla    Fla    \n",
			"vbar:         Clo    Fla    Fla    Fla    \n",
			"u:            Clo    Nes    Nes    Nes    \n",
			"v:            Clo    Nes    Nes    Nes    \n",
			"temp:         Gra    Nes    Nes    Gra    \n",
			"salt:         Gra    Nes    Nes    Gra    \n",
			"tke:          Clo    Gra    Gra    Gra    \n",
			"ubar_stokes:  Clo    Gra    Gra    Gra    \n",
			"vbar_stokes:  Clo    Gra    Gra    Gra    \n",
			"u_stokes:     Clo    Gra    Gra    Gra    \n",
			"v_stokes:     Clo    Gra    Gra    Gra" ;
		:svn_url = "" ;
		:svn_rev = "" ;
		:code_dir = "/disk/r074/lzhenn/Njord_Calypso/COAWST_Njord_v35" ;
		:header_dir = "/home/lzhenn/array74/Njord_Calypso/COAWST_Njord_v35//Projects/Njord" ;
		:header_file = "njord.h" ;
		:os = "Linux" ;
		:cpu = "x86_64" ;
		:compiler_system = "ifort" ;
		:compiler_command = "/home/metctm1/soft/mpich3-intel20/bin/mpif90" ;
		:compiler_flags = "-fp-model precise -ip -O3 -traceback -check uninit -ip -O3 -assume byterecl -I/home/lzhenn/array127/soft/MCT4COAWST-intel20-amd/include -I/home/lzhenn/array74/Njord_Calypso/COAWST_Njord_v35///WRF/main -I/home/lzhenn/array74/Njord_Calypso/COAWST_Njord_v35///WRF/external/esmf_time_f90 -I/home/lzhenn/array74/Njord_Calypso/COAWST_Njord_v35///WRF/frame -I/home/lzhenn/array74/Njord_Calypso/COAWST_Njord_v35///WRF/share" ;
		:tiling = "008x003" ;
		:history = "ROMS/TOMS, Version 3.8, Saturday - December 4, 2021 -  8:33:25 PM" ;
		:ana_file = "ROMS/Functionals/ana_btflux.h, ROMS/Functionals/ana_fsobc.h, ROMS/Functionals/ana_m2obc.h, ROMS/Functionals/ana_nudgcoef.h" ;
		:CPP_options = "CWST_GBA, ANA_BSFLUX, ANA_BTFLUX, ANA_FSOBC, ANA_M2OBC, ANA_NUDGCOEF, ANA_SRFLUX, ASSUMED_SHAPE, ATM_PRESS, ATM2OCN_FLUXE AVERAGES, !BOUNDARY_A !COLLECT_ALL..., CHARNOK, CRAIG_BANNER, COARE_TAYLOR_YELLAND, CURVGRID, DJ_GRADPS, DOUBLE_PRECISION, FRC_COUPLING, GLS_MIXING, KANTHA_CLAYSON, LIMIT_VDIFF, LIMIT_VVISC, MASKING, MCT_LIB, MIX_GEO_TS, MIX_S_UV, MPI, WEC_VF, WDISS_WAVEMOD, NONLINEAR, NONLIN_EOS, N2S2_HORAVG, POWER_LAW, PROFILE, K_GSCHEME, REDUCE_ALLGATHER, RI_SPLINES, !RST_SINGLE, SALINITY, SOLAR_SOURCE, SOLVE3D, SPLINES_VDIFF, SPLINES_VVISC, SWAN_COUPLING, TS_U3HADVECTION, TS_C4VADVECTION, TS_DIF2, UV_ADV, UV_COR, UV_U3HADVECTION, UV_C4VADVECTION, UV_KIRBY, UV_LOGDRAG, UV_VIS2, VAR_RHO_2D, WAVES_OCEAN, WRF_COUPLING" ;
}
